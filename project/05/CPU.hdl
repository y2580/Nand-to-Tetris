// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
	// bit: 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0
    //   A:  0  v  v  v  v  v v v v v v v v v v v
    //   C:  1  x  x  a  c  c c c c c d d d j j j
    //                                A D M
    Mux16(a=instruction,b=outALU,sel=instruction[15],out=outaorc) ;
    
    Not(in=instruction[15],out=A0) ;
    Or(a=A0,b=instruction[5],out=memA) ;
    ARegister(in=outaorc,load=memA,out[0..14]=addressM,out=AReg);
    Mux16(a=AReg,b=inM,sel=instruction[12],out=AorM);

    And(a=instruction[4],b=instruction[15],out=CandD);
    DRegister(in=outALU,load=CandD,out=DReg);
    And(a=instruction[3],b=instruction[15],out=writeM );
    // comp=0 : zr=1
    //     <0 : ng=1
    //     >0 : zr=ng=0
    ALU(x=DReg,y=AorM,zx=instruction[11],nx=instruction[10],zy=instruction[9],ny=instruction[8],f=instruction[7],no=instruction[6],out=outALU,out=outM,zr=zr,ng=ng);
    /** 
    jmp
    !j2&&!j1&&j0&&!zr&&!ng ||** !j2&&j1&&!j0&&zr ||
    !j2&&j1&&j0&&!ng ||  j2&&!j1&&!j0&&ng ||
    j2&&!j1&&j0&&!zr ||** j2&&j1&&!j0&&zr ||  j2&&j1&&!j0&&ng
    j2&&j1&&j0
    => 化簡
    !j2&&!j1&&j0&&!zr&&!ng ||** j1&&!j0&&zr ||
    !j2&&j1&&j0&&!ng ||  j2&&!j1&&!j0&&ng ||
    j2&&!j1&&j0&&!zr ||  j2&&j1&&!j0&&ng ||
    j2&&j1&&j0
    **/
    Not(in=instruction[2], out=nj2 );
    Not(in=instruction[1], out=nj1 );
    Not(in=instruction[0], out=nj0 );
    Not(in=zr, out=nzr );
    Not(in=ng, out=nng );

    And(a=nj2, b=nj1 , out= nj1andnj2);
    And(a=instruction[0], b=nzr , out= j0andnzr );
    And(a=nj1andnj2 , b=j0andnzr , out= nj1nj2andj0nzr );
    And(a=nj1nj2andj0nzr , b=nng , out=jgt );

    And(a=instruction[1], b=nj0 , out= j1andnj0);
    And(a=j1andnj0 , b=zr , out= jeqandjle);

    And(a=nj2, b=instruction[1] , out= nj2andj1);
    And(a=instruction[0] , b=nng , out= j0andnng);
    And(a=nj2andj1 , b=j0andnng , out=jge );

    And(a=instruction[2], b=nj1 , out= j2andnj1);
    And(a=nj0 , b=ng , out= nj0andng);
    And(a=j2andnj1 , b=nj0andng , out=jlt );

    And(a=j2andnj1 , b=j0andnzr , out=jne );

    And(a=j2andj1 , b=nj0andng , out=jle );

    And(a=instruction[2] , b=instruction[1] , out=j2andj1 );
    And(a=j2andj1 , b=instruction[0] , out=djmp );

    Or8Way(in[0]=jgt, in[1]=jeqandjle, in[2]=jge, in[3]=jlt,
    in[4]=jne, in[5]=jle, in[6]=djmp, in[7]=false,out=outJMP);
    And(a=outJMP, b=instruction[15], out=jmp);

    //pc
    PC(in=AReg , load=jmp , inc=true , reset=reset , out[0..14]=pc );

}